{"meta":{"title":"Alice的博客","subtitle":"","description":"Goals determine what you going to be!","author":"Alice","url":"http://delaprada.com","root":"/"},"pages":[{"title":"categories","date":"2019-12-25T01:15:45.000Z","updated":"2019-12-26T12:39:38.305Z","comments":false,"path":"categories/index.html","permalink":"http://delaprada.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-25T01:50:31.000Z","updated":"2019-12-26T12:39:54.263Z","comments":false,"path":"tags/index.html","permalink":"http://delaprada.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS 圣杯布局和双飞翼布局","slug":"CSS-圣杯布局和双飞翼布局","date":"2020-01-15T08:49:17.000Z","updated":"2020-01-15T11:25:44.934Z","comments":true,"path":"2020/01/15/CSS-圣杯布局和双飞翼布局/","link":"","permalink":"http://delaprada.com/2020/01/15/CSS-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/","excerpt":"","text":"CSS 圣杯布局和双飞翼布局两个常见的前端布局。 圣杯布局代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; margin:0; padding:0; text-align:center; &#125; .header, .footer&#123; background-color: skyblue; height:60px; line-height:60px; /*文字水平垂直居中*/ &#125; .container&#123; overflow:hidden; /*因为内部都是浮动元素，所以要设置overflow来撑起父元素*/ padding:0 100px; /*左右内边距为100px*/ &#125; .main&#123; width:100%; background-color: peachpuff; height:100px; line-height: 100px; float:left; &#125; .left&#123; background-color: lightgreen; width:100px; height:100px; line-height:100px; float:left; margin-left:-100%; /*让left前移一行*/ position:relative; left:-100px; &#125; .right&#123; background-color: pink; width:100px; height:100px; line-height:100px; float:left; margin-left:-100px; /*right只需要前移right的宽度即可*/ position:relative; /*container设置了padding,所以要相对定位移动才能将left和right移动到对应的位置*/ right:-100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"header\"&gt;header&lt;/div&gt; &lt;div class=\"container\"&gt; &lt;div class=\"main\"&gt;main&lt;/div&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;div class=\"footer\"&gt;footer&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果图： 实现原理： 设置父元素container为overflow:hidden，撑起父元素，子元素main、left、right均设为float:left，浮动起来。效果如下： 为了让main模块自适应，将其设为100% 为了让left和right模块跑上去，设置left模块的margin:-100%，可以理解为：负的话就是向上前进，正值的话就是直接的间隔；right模块就设置为margin:-100px，大小为right模块的宽度 为了使main模块往里收，设置.container{ padding: 0 100px}，即设置左右内边距。 利用相对定位移动left和right 双飞翼布局代码实现： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; margin:0; padding:0; text-align:center; &#125; .header, .footer&#123; height:60px; background-color: skyblue; line-height:60px; &#125; .container&#123; overflow:hidden; &#125; .main&#123; width:100%; height:100px; line-height:100px; float:left; background-color: peachpuff; &#125; .inner-main&#123; margin-left:100px; /*通过在main内部再设置一个div来进行左右模块的间隔布局*/ margin-right:100px; &#125; .left&#123; background-color: lightgreen; width:100px; height:100px; line-height:100px; margin-left:-100%; float:left; &#125; .right&#123; background-color: yellow; width:100px; height:100px; line-height:100px; margin-left:-100px; float:left; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"header\"&gt;header&lt;/div&gt; &lt;div class=\"container\"&gt; &lt;div class=\"main\"&gt; &lt;div class=\"inner-main\"&gt;main&lt;/div&gt; &lt;/div&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;div class=\"footer\"&gt;footer&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果图： 实现原理： 双飞翼布局则不设置container里的padding属性，而是通过在main模块中添加inner-main模块，然后对这个div进行margin-left和margin-right计算。 圣杯布局和双飞翼布局的主要区别： 圣杯布局是设置container的padding属性以及left和right模块的position:relative，left:-100px或right:-100px 双飞翼布局则不设置container里的padding属性，而是通过在main模块中添加inner-main模块，然后对这个div进行margin-left和margin-right计算 参考：https://segmentfault.com/a/1190000004579886","categories":[{"name":"CSS","slug":"CSS","permalink":"http://delaprada.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://delaprada.com/tags/CSS/"}]},{"title":"JavaScript模块化编程","slug":"JavaScript模块化编程","date":"2020-01-14T15:10:50.000Z","updated":"2020-01-14T15:11:30.414Z","comments":true,"path":"2020/01/14/JavaScript模块化编程/","link":"","permalink":"http://delaprada.com/2020/01/14/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/","excerpt":"","text":"模块化编程目录： AMD CMD commom.js ES6 Module AMDAMD是依赖前置，提前执行。AMD一开始是CommonJS规范中的一个草案，即异步模块加载机制。后来由该草案的作者以RequireJS实现了AMD规范，所以一般说AMD也是指RequireJS。 AMD的基本语法通过define来定义一个模块，使用require可以导入定义的模块。 用define定义无依赖的模块： 12345//a.js//define可以传入三个参数，分别是字符串-模块名、数组-依赖模块、函数-回调函数define(function()&#123; return 1;&#125;) 用define定义有依赖的模块： 1234567define([\"alpha\"], function( alpha )&#123; return &#123; verb : function()&#123; return alpha.verb() + 1 ; &#125; &#125;&#125;); 用require进行模块加载： 123require(['math'], function(math) &#123; math.add(2, 3);&#125;); AMD的特点对于依赖的模块，AMD推崇依赖前置，提前执行。也就是定义模块和加载模块都要在一开始就把依赖写好。例如define函数当中的[&quot;alpha&quot;]，就是定义模块当中的依赖；require函数当中的[&quot;math&quot;]是加载模块当中的依赖。 CMDCMD是依赖就近，延迟执行。 1234567891011121314151617181920212223//AMDdefine(['./a','./b'], function (a, b) &#123; //依赖一开始就写好 a.test(); b.test();&#125;); //CMDdefine(function (requie, exports, module) &#123; //依赖可以就近书写 var a = require('./a'); a.test(); ... //软依赖 if (status) &#123; var b = requie('./b'); b.test(); &#125;&#125;); CMD是在用到了某个模块的时候再去require，类似按需加载。 CMD的特点对于依赖的模块，CMD推崇依赖就近，延迟执行。也就是说，只有到require时依赖模块才执行。 摘自：https://segmentfault.com/a/1190000004873947 CommonJS基本用法 通过module.exports或者exports来输出模块 通过require来导入模块 1234567891011121314151617181920//a.jsmodule.exports = function () &#123; console.log(\"hello world\")&#125;//b.jsvar a = require('./a');a();//\"hello world\"//或者//a2.jsexports.num = 1;exports.obj = &#123;xx: 2&#125;;//b2.jsvar a2 = require('./a2');console.log(a2);//&#123; num: 1, obj: &#123; xx: 2 &#125; &#125; CommonJS的特点 所有代码都运行在模块作用域，不会污染全局作用域 模块都是同步加载的，即只有加载完成，才能执行后面的操作 模块在首次执行后就会缓存，再次加载只返回缓存结果。如果想要再次执行，可清楚缓存 require返回的值是被输出的值的拷贝，模块内部的变化不会影响这个值 ES6 Module基本用法： export或export default来输出模块 import来导入模块 （export default就是能够为导入的模块自定义名称，这样就不用知道模块在原本的js文件当中的名字，按名字导入了） 1234567891011//a.jsvar name = 'lin';var age = 13;var job = 'ninja';export &#123; name, age, job&#125;;//b.jsimport &#123; name, age, job&#125; from './a.js';console.log(name, age, job);// lin 13 ninja 12345678//a2.jsexport default function () &#123; console.log('default ');&#125;//b2.jsimport customName from './a2.js';customName(); // 'default' ES6 Module的特点（对比CommonJS） CommonJS模块是运行时加载，ES6 Module是编译时输出接口； CommonJS加载的是整个模块，将所有的接口全部加载进来，ES6 Module可以单独加载其中的某个接口（对应名字单独加载，加载这个模块想=需要的）； CommonJS输出是值的拷贝，ES6 Module输出的是值的引用，被输出模块的内部的改变会影响引用的改变； CommonJS this指向当前模块，ES6 Module this指向undefined; 参考：https://juejin.im/post/5db95e3a6fb9a020704bcd8d","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/tags/JavaScript/"}]},{"title":"Generator函数 async函数","slug":"Generator函数-async函数","date":"2020-01-14T12:43:59.000Z","updated":"2020-01-14T12:44:40.543Z","comments":true,"path":"2020/01/14/Generator函数-async函数/","link":"","permalink":"http://delaprada.com/2020/01/14/Generator%E5%87%BD%E6%95%B0-async%E5%87%BD%E6%95%B0/","excerpt":"","text":"Generator重要概念： Generator 函数是 ES6 提供的一种异步编程解决方案 执行Generator函数会返回一个遍历器对象 形式上Generator函数是一个普通函数，有两个特征：1）function关键字与函数名之间有个星号； 2）函数内部使用yield表达式，定义不同的内部状态 调用Generator函数后，该函数并不执行，返回的不是函数运行结果，而是一个指向内部状态的指针对象 必须调用遍历器对象的next方法，使得指针移向下一个状态，输出返回的结果 next方法返回的是一个对象。它的value属性就是当前yield表达式的值hello，done属性的值false则表示遍历还没有结束（即没有遇到return）。 1234567function* helloWorldGenerator() &#123; yield 'hello'; yield 'world'; return 'ending';&#125;var hw = helloWorldGenerator(); 1234567891011hw.next()// &#123; value: 'hello', done: false &#125;hw.next()// &#123; value: 'world', done: false &#125;hw.next()// &#123; value: 'ending', done: true &#125;hw.next()// &#123; value: undefined, done: true &#125; 另一个栗子： 1234function* gen(x)&#123; const y = yield x + 6; return y;&#125; 普通执行： 12345678const g = gen(1);//执行 Generator 会返回一个Object,而不是像普通函数返回return 后面的值g.next() // &#123; value: 7, done: false &#125;//调用指针的 next 方法,会从函数的头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式或return语句暂停,也就是执行yield 这一行// 执行完成会返回一个 Object,// value 就是执行 yield 后面的值,done 表示函数是否执行完毕g.next() // &#123; value: undefined, done: true &#125;// 因为最后一行 return y 被执行完成,所以done 为 true next方法传参数： 1234const g = gen(1);g.next() // &#123; value: 7, done: false &#125;g.next(2) // &#123; value: 2, done: true &#125; // next 的参数是作为上个阶段异步任务的返回结果 异步应用因为yield能够中断执行代码的特性，可以帮助我们来控制异步代码的执行顺序。 例如有两个异步的函数 A 和 B, 并且 B 的参数是 A 的返回值，也就是说，如果 A 没有执行结束，我们不能执行 B。 那这时候我们写一段伪代码： 12345function* effect() &#123; const &#123; param &#125; = yield A(); const &#123; result &#125; = yield B(param); console.table(result);&#125; 这时候我们如果需要得到 result 那么我们就需要: 123const iterator = effect()iterator.next()iterator.next() co库可以用来每次执行A()/b()的请求结束之后，都会自动执行next()方法。 async和awaitasync函数就是Generator的语法糖。 形式上的不同： async函数将Generator函数的星号（*）替换成async 将yield替换成await async函数对Generator函数的改进体现在以下4点： 内置执行器 也就是说async函数的执行，和普通函数一样，只需要一行就可以。不用像Generator函数需要调用next方法才能真正执行。 例如对于一个async函数来说： 123456const asyncReadFile = async function () &#123; const f1 = await readFile('/etc/fstab'); const f2 = await readFile('/etc/shells'); console.log(f1.toString()); console.log(f2.toString());&#125;; 调用时只需要： 1asyncReadFile(); 更好的语义 async和await比起星号和yield，语义更加清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。 返回值是Promise async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。 async函数基本用法 async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。 123456789async function getStockPriceByName(name) &#123; const symbol = await getStockSymbol(name); const stockPrice = await getStockPrice(symbol); return stockPrice;&#125;getStockPriceByName('goog').then(function (result) &#123; console.log(result);&#125;); 先执行了第一个await后的getStockSymbol(name)函数；得到了股票的名称symbol后，将symbol传给第二个await后面的getStockPrice(symbol)作为参数；最后返回股票价格stockPrice。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/tags/JavaScript/"}]},{"title":"函数柯里化","slug":"函数柯里化","date":"2020-01-14T06:27:55.000Z","updated":"2020-01-14T06:29:51.055Z","comments":true,"path":"2020/01/14/函数柯里化/","link":"","permalink":"http://delaprada.com/2020/01/14/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/","excerpt":"","text":"函数柯里化柯里化的概念：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的函数。 看一个栗子： 1234567891011121314var add = function(x) &#123; return function(y) &#123; return x + y; &#125;;&#125;;var increment = add(1);var addTen = add(10);increment(2);// 3addTen(2);// 12 我们定义了一个add函数，它接受一个参数并返回一个新的函数。调用了add之后，返回的函数就通过闭包的方式记住了add的第一个参数。 因为一次性地调用它有点繁琐，所以使用一个特殊的curry帮助函数使得这类函数的定义和调用更加容易。 一些柯里函数实例： 12345var curry = require('lodash').curry;var match = curry(function(what, str) &#123; return str.match(what);&#125;); 12345match(/\\s+/g, \"hello world\");// [ ' ' ]match(/\\s+/g)(\"hello world\");// [ ' ' ] 以上两种方法都可以执行。第二种方法是比较常见的柯里化方法。先传递一部分参数（题目中为正则表达式）来调用函数，然后返回一个函数（题目中为str.match()来处理剩下的函数）。（题目中是匹配空格） 以上的形式可以更加具体化： 12345var hasSpaces = match(/\\s+/g);// function(x) &#123; return x.match(/\\s+/g) &#125;hasSpaces(\"hello world\");// [ ' ' ] 这里表明的是一种“预加载”函数的能力，通过传递一到两个参数调用函数，就能得到一个记住了这些参数的新函数。 再举一个非常常见的例子： 如果我们想要验证一串数字是否是正确的手机号，按照普通的思路来做，大家可能是这样封装，如下： 123function checkPhone(phoneNumber) &#123; return /^1[34578]\\d&#123;9&#125;$/.test(phoneNumber);&#125; 而如果想要验证是否是邮箱呢？这么封装： 123function checkEmail(email) &#123; return /^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/.test(email);&#125; 我们还可能会遇到验证身份证号，验证密码等各种验证信息，因此在实践中，为了统一逻辑，我们就会封装一个更为通用的函数，将用于验证的正则与将要被验证的字符串作为参数传入： 123function check(targetString, reg) &#123; return reg.test(targetString);&#125; 但是这样封装之后，在使用时又会稍微麻烦一点，因为会总是输入一串正则，这样就导致了使用时的效率低下： 12check(/^1[34578]\\d&#123;9&#125;$/, '14900000088');check(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/, 'test@163.com'); 这个时候，我们就可以借助柯里化，在check的基础上再做一层封装，以简化使用： 1234var _check = createCurry(check);var checkPhone = _check(/^1[34578]\\d&#123;9&#125;$/);var checkEmail = _check(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/); 最后在使用的时候就会变得更加直观与简洁了： 12checkPhone('183888888');checkEmail('xxxxx@test.com'); 再看一个前端面试中常考的题目： 1如何实现add(2)(3)(4) &#x3D; 9 函数柯里化解决这个问题： 12345678910111213141516171819let myAdd = (a, b, c) =&gt; a+b+c;function curry(fn, args)&#123; let len = fn.length; let _this = this; let _args = args || []; return function()&#123; let args = Array.prototype.slice.apply(arguments); args = Array.prototype.concat.call(_args, args); // 当接收到的参数小于fn所需参数个数时，继续接收参数 if(args.length &lt; len)&#123; return curry.call(_this, fn, args); &#125; return fn.apply(this, args); &#125;&#125;let add = curry(myAdd);console.log(add(2)(3)(4)); // 9console.loh(add(2,3)(4)); // 9console.log(add(2,3,4)); // 9 但是这个例子不具有普遍性。如果传入的参数不是3个的话不能这么用。 所以有了下面的进化之后的代码： 1234567891011121314151617181920212223function add() &#123; // 第一次执行时，定义一个数组专门用来存储所有的参数 var _args = Array.prototype.slice.call(arguments); // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值 var _adder = function() &#123; _args.push(...arguments); return _adder; &#125;; // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回 _adder.toString = function () &#123; return _args.reduce(function (a, b) &#123; return a + b; &#125;); &#125; return _adder;&#125;add(1)(2)(3) // 6add(1, 2, 3)(4) // 10add(1)(2)(3)(4)(5) // 15add(2, 6)(1) // 9 为什么要进行隐式转化？ 因为当我们将函数参与其他的计算时，函数会默认调用toString方法，直接将函数体转换为字符串参与计算。 12function fn() &#123; return 20 &#125;console.log(fn + 10); // 输出结果 function fn() &#123; return 20 &#125;10 我们可以重写函数的toString方法，让函数参与计算，输出我们想要的结果： 1234function fn() &#123; return 20; &#125;fn.toString = function() &#123; return 30 &#125;console.log(fn + 10); // 40 除此之外，当我们重写函数的valueOf方法也能够改变函数的隐式转换结果： 1234function fn() &#123; return 20; &#125;fn.valueOf = function() &#123; return 60 &#125;console.log(fn + 10); // 70 参考博客： https://www.jianshu.com/p/5e1899fe7d6b https://www.cnblogs.com/hmchen/p/11564394.html https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E5%8F%8C%E5%85%B3%E8%AF%AD%E5%92%96%E5%96%B1","categories":[{"name":"前端","slug":"前端","permalink":"http://delaprada.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://delaprada.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"JavaScript this全面解析","slug":"JavaScript-this全面解析","date":"2020-01-13T03:12:48.000Z","updated":"2020-01-13T03:14:21.019Z","comments":true,"path":"2020/01/13/JavaScript-this全面解析/","link":"","permalink":"http://delaprada.com/2020/01/13/JavaScript-this%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/","excerpt":"","text":"先说结论我们可以顺序应用下面四条规则来判断this的绑定对象： 如果是由new调用，绑定到新创建的对象。 如果是由call或者apply、bind调用，绑定到指定的对象上。 如果是由上下文对象调用（即this是对象中的方法里使用的），绑定到那个上下文对象上。 如果是默认情况下，严格模式绑定到undefined，否则绑定到全局对象上。 但是ES6中的箭头函数并不会使用者四条标准的绑定规则。箭头函数会继承外层函数调用的this绑定。 new绑定12345function foo(a)&#123; this.a=a;&#125;var bar=new foo(2);console.log(bar.a); //2 我们使用new来调用foo(…)时，会构造一个新对象并把它绑定到foo(…)调用中的this上。 显式绑定call、apply、bind1234567function foo()&#123; console.log(this.a);&#125;var obj=&#123; a:2;&#125;;foo.call(obj); //2 call用来将函数foo中的this绑定到obj上。 隐式绑定（上下文对象调用）如果this所在的函数是对象中的方法的话，this就会指向这个对象。 12345678function foo()&#123; console.log(this.a);&#125;var obj=&#123; a:2, foo:foo&#125;;obj.foo(); //2 foo此时是obj对象的一个方法，所以this就会指向obj。 但是对象属性引用链中只有上一层或者说最后一层在调用位置中起作用： 123456789101112function foo()&#123; console.log(this.a);&#125;var obj2=&#123; a:42, foo:foo&#125;;var obj1=&#123; a:2, obj2:obj2&#125;;obj1.obj2.foo(); //42 隐式丢失也是this隐式绑定中常见的问题： 12345678910function foo()&#123; console.log(this.a);&#125;var obj=&#123; a:2, foo:foo&#125;;var bar=obj.foo; //函数别名！var a=\"oops, global\"; //a是全局对象的属性bar(); //“oops, global” 此时bar是obj.foo的一个引用，但实际上它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定。 回调函数丢失this绑定是也是非常常见的问题： 123456789101112function foo()&#123; console.log(this.a);&#125;function doFoo(fn)&#123; fn(); //调用位置&#125;var obj=&#123; a:2, foo:foo&#125;;var a=\"oops global\"; //全局对象属性doFoo(obj.foo); //\"oops global\" 函数doFoo传入了函数作为参数，并在doFoo中调用。我们可以把它看做将函数copy到了doFoo函数体中，调用的时候this指向的是全局作用域。 默认绑定12345function foo()&#123; console.log(this.a);&#125;var a=2;foo(); //2 在这个例子中，函数调用应用了this的默认绑定，this指向全局对象。 如果使用严格模式（strict mode），则不能将全局对象用于默认绑定，this会绑定到undefined。 123456function foo()&#123; \"use strict\"; console.log(this.a);&#125;var a=2;foo(); //TypeError: this is undefined 箭头函数中的this箭头函数不会创建自己的this，它只会从自己的作用域链的上一层继承this。 12345678910111213function foo()&#123; return (a)=&gt;&#123; console.log(this.a); &#125;&#125;var obj1=&#123; a:2&#125;;var obj2=&#123; a:3&#125;;var bar=foo.call(obj1);bar.call(obj2); //2,不是3！ foo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，所以bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。 再看一个例子： 12345678910function foo() &#123; setTimeout(() =&gt; &#123; console.log('id:', this.id); &#125;, 100);&#125;var id = 21;foo.call(&#123; id: 42 &#125;);// id: 42 foo调用时传入的是什么对象，this就指向谁。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21（严格模式则输出undefined）。 参考书籍：《你不知道的JavaScript》","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/tags/JavaScript/"}]},{"title":"JavaScript基本知识","slug":"JavaScript基本知识","date":"2019-12-30T02:14:24.000Z","updated":"2019-12-30T02:30:31.762Z","comments":true,"path":"2019/12/30/JavaScript基本知识/","link":"","permalink":"http://delaprada.com/2019/12/30/JavaScript%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","excerpt":"","text":"JavaScriptES6和JavaScript的关系ES6的全称为ECMAScript 6.0，是JavaScript语言下一代的标准，是使得JavaScript可以用来编写复杂的大型应用程序，称为企业级开发语言。ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。 JavaScript前言JavaScript是世界上最流行的脚本语言，是一种运行在浏览器中的解释型的编程语言。在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互。 JavaScript引入 用直接包含js代码 把js代码放到一个单独的.js文件，在html中通过引入这个文件，这么做更有利于代码维护 JavaScript基本语法 JavaScript的语法和Java类似，每个语句以；结束 JavaScript严格区分大小写 JavaScript的数据类型基本数据类型：Number, String, Boolean, null, undefined, Symbol（ES6中新添加的类型，一种实例是唯一且不可改变的数据类型） NumberJavaScript不区分整数和浮点数，统一用Number表示。可以表示 整数 浮点数 科学计数法 负数 NaN（表示Not a Number，当无法计算结果时用NaN表示） Infinity（表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity） String字符串是以单引号或双引号括起来的文本。 模板字符串要把多个字符串连接起来，可以用+号连接： 1234var name = '小明';var age = 20;var message = '你好, ' + name + ', 你今年' + age + '岁了!';alert(message); 如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量： 1234var name = '小明';var age = 20;var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;alert(message); 操作字符串获取字符串长度： 12var s = 'Hello, world!';s.length; // 13 要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始： 1234567var s = 'Hello, world!';s[0]; // 'H's[6]; // ' 's[7]; // 'w's[12]; // '!'s[13]; // undefined 超出范围的索引不会报错，但一律返回undefined 需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果： 123var s = 'Test';s[0] = 'X';alert(s); // s仍然为'Test' 字符串常用方法：注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串： toUpperCase： toUpperCase()把一个字符串全部变为大写： 12var s = 'Hello';s.toUpperCase(); // 返回'HELLO' toLowerCase： toLowerCase()把一个字符串全部变为小写： 123var s = 'Hello';var lower = s.toLowerCase(); // 返回'hello'并赋值给变量lowerlower; // 'hello' substring: substring()返回指定索引区间的子串： 123var s = 'hello, world's.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello's.substring(7); // 从索引7开始到结束，返回'world' Booleantrue或者false 比较运算符当我们对Number做比较时，可以通过比较运算符得到一个布尔值，要特别注意比较运算符==和===： ==比较：它会自动转换数据类型再比较，很多时候会得到很奇怪的结果 ===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。 由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较 另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己： NaN===NaN //false 唯一能判断NaN的方法是通过isNaN()函数：isNaN(NaN) //true 最后要注意浮点数的相等比较： 1 / 3 === (1 - 2 / 3); // false 比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值： 1Math.abs(1 &#x2F; 3 - (1 - 2 &#x2F; 3)) &lt; 0.0000001; &#x2F;&#x2F; true null和undefined null表示一个“空”的值、表示“无”的对象，转为数值是为0；undefined是一个表示“无”的原始值，转为数值是NaN，当声明的变量还未被初始化时，变量的默认值为undefined。 Null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象 Undefined表示”缺少值”,就是此处应该有一个值,但是还没有定义，典型用法是： 变量被声明了，但没有赋值时，就等于undefined 调用函数时，应该提供的参数没有提供，该参数等于undefined 对象没有赋值属性，该属性的值为undefined 函数没有返回值时，默认返回undefined null表示”没有对象”，即该处不应该有值。典型用法是： 作为函数的参数，表示该函数的参数不是对象 作为对象原型链的终点 数组数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如： 1[1, 2, 3.14, &#39;Hello&#39;, null, true]; 上述数组包含6个元素。数组用[]表示，元素之间用,分隔。 另一种创建数组的方法是通过Array()函数实现： 1new Array(1, 2, 3); &#x2F;&#x2F; 创建了数组[1, 2, 3] 然而，出于代码的可读性考虑，强烈建议直接使用[]。 数组的元素可以通过索引来访问。请注意，索引的起始值为0： 1234var arr &#x3D; [1, 2, 3.14, &#39;Hello&#39;, null, true];arr[0]; &#x2F;&#x2F; 返回索引为0的元素，即1arr[5]; &#x2F;&#x2F; 返回索引为5的元素，即truearr[6]; &#x2F;&#x2F; 索引超出了范围，返回undefined 要取得Array的长度，直接访问length属性： 12var arr = [1, 2, 3.14, 'Hello', null, true];arr.length; // 6 请注意，直接给Array的length赋一个新的值会导致Array大小的变化： 123456var arr = [1, 2, 3];arr.length; // 3arr.length = 6;arr; // arr变为[1, 2, 3, undefined, undefined, undefined]arr.length = 2;arr; // arr变为[1, 2] Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array： 123var arr = ['A', 'B', 'C'];arr[1] = 99;arr; // arr现在变为['A', 99, 'C'] (注意此处与String的不同，String是不可变的) 请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化： 123var arr = [1, 2, 3];arr[5] = 'x';arr; // arr变为[1, 2, 3, undefined, undefined, 'x'] 大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。 indexOf 与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置： 12345var arr = [10, 20, '30', 'xyz'];arr.indexOf(10); // 元素10的索引为0arr.indexOf(20); // 元素20的索引为1arr.indexOf(30); // 元素30没有找到，返回-1arr.indexOf('30'); // 元素'30'的索引为2 注意了，数字30和字符串&#39;30&#39;是不同的元素。 slice slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array： 123var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G'] 如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array： 1234var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];var aCopy = arr.slice();aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']aCopy === arr; // false push和pop push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉： 123456789var arr = [1, 2];arr.push('A', 'B'); // 返回Array新的长度: 4arr; // [1, 2, 'A', 'B']arr.pop(); // pop()返回'B'arr; // [1, 2, 'A']arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次arr; // []arr.pop(); // 空数组继续pop不会报错，而是返回undefinedarr; // [] unshift和shift 如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉： 123456789var arr = [1, 2];arr.unshift('A', 'B'); // 返回Array新的长度: 4arr; // ['A', 'B', 1, 2]arr.shift(); // 'A'arr; // ['B', 1, 2]arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次arr; // []arr.shift(); // 空数组继续shift不会报错，而是返回undefinedarr; // [] sort 123var arr = ['B', 'C', 'A'];arr.sort();arr; // ['A', 'B', 'C'] reverse reverse()把整个Array的元素给掉个个，也就是反转： 123var arr = ['one', 'two', 'three'];arr.reverse(); arr; // ['three', 'two', 'one'] splice splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素： 12345678910var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];// 从索引2开始删除3个元素,然后再添加两个元素:arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']// 只删除,不添加:arr.splice(2, 2); // ['Google', 'Facebook']arr; // ['Microsoft', 'Apple', 'Oracle']// 只添加,不删除:arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle'] concat concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array： 1234var arr = ['A', 'B', 'C'];var added = arr.concat([1, 2, 3]);added; // ['A', 'B', 'C', 1, 2, 3]arr; // ['A', 'B', 'C'] 请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。 实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里： 12var arr = ['A', 'B', 'C'];arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4] join join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串： 12var arr = ['A', 'B', 'C', 1, 2, 3];arr.join('-'); // 'A-B-C-1-2-3' 如果Array的元素不是字符串，将自动转换为字符串后再连接。 对象JavaScript的对象是一组由键-值组成的无序集合，用一个{...}表示一个对象，例如： 12345678var person = &#123; name: 'Bob', age: 20, tags: ['js', 'web', 'mobile'], city: 'Beijing', hasCar: true, zipcode: null&#125;; 注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。 JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，person的name属性为&#39;Bob&#39;，zipcode属性为null。 要获取一个对象的属性，我们用对象变量.属性名的方式： 12person.name; // 'Bob'person.zipcode; // null 访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用&#39;&#39;括起来： 1234var xiaohong = &#123; name: '小红', 'middle-school': 'No.1 Middle School'&#125;; xiaohong的属性名middle-school不是一个有效的变量，就需要用&#39;&#39;括起来。访问这个属性也无法使用.操作符，必须用[&#39;xxx&#39;]来访问： 123xiaohong['middle-school']; // 'No.1 Middle School'xiaohong['name']; // '小红'xiaohong.name; // '小红' 实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。 如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined 由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性： 1234567891011var xiaoming = &#123; name: '小明'&#125;;xiaoming.age; // undefinedxiaoming.age = 18; // 新增一个age属性xiaoming.age; // 18delete xiaoming.age; // 删除age属性xiaoming.age; // undefineddelete xiaoming['name']; // 删除name属性xiaoming.name; // undefineddelete xiaoming.school; // 删除一个不存在的school属性也不会报错 如果我们要检测xiaoming是否拥有某一属性，可以用in操作符： 12345678910var xiaoming = &#123; name: '小明', birth: 1990, school: 'No.1 Middle School', height: 1.70, weight: 65, score: null&#125;;'name' in xiaoming; // true'grade' in xiaoming; // false 不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的： 1'toString' in xiaoming; // true 因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。 要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法： 12345var xiaoming = &#123; name: '小明'&#125;;xiaoming.hasOwnProperty('name'); // truexiaoming.hasOwnProperty('toString'); // false 变量变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句，比如： 12345var a; &#x2F;&#x2F; 申明了变量a，此时a的值为undefinedvar $b &#x3D; 1; &#x2F;&#x2F; 申明了变量$b，同时给$b赋值，此时$b的值为1var s_007 &#x3D; &#39;007&#39;; &#x2F;&#x2F; s_007是一个字符串var Answer &#x3D; true; &#x2F;&#x2F; Answer是一个布尔值truevar t &#x3D; null; &#x2F;&#x2F; t的值是null 在JavaScript中，使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如： 12var a &#x3D; 123; &#x2F;&#x2F; a的值是整数123a &#x3D; &#39;ABC&#39;; &#x2F;&#x2F; a变为字符串 这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言（例如int） 使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。 循环for…infor循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来： 12345678var o = &#123; name: 'Jack', age: 20, city: 'Beijing'&#125;;for (var key in o) &#123; console.log(key); // 'name', 'age', 'city'&#125; 要过滤掉对象继承的属性，用hasOwnProperty()来实现： 12345678910var o = &#123; name: 'Jack', age: 20, city: 'Beijing'&#125;;for (var key in o) &#123; if (o.hasOwnProperty(key)) &#123; console.log(key); // 'name', 'age', 'city' &#125;&#125; 由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引： 12345var a = ['A', 'B', 'C'];for (var i in a) &#123; console.log(i); // '0', '1', '2' console.log(a[i]); // 'A', 'B', 'C'&#125; 请注意，for ... in对Array的循环得到的是String而不是Number。 MapMap是一组键值对的结构，具有极快的查找速度。 举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array： 12var names = ['Michael', 'Bob', 'Tracy'];var scores = [95, 75, 85]; 给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。 如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下： 12var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);m.get('Michael'); // 95 初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法： 1234567var m = new Map(); // 空Mapm.set('Adam', 67); // 添加新的key-valuem.set('Bob', 59);m.has('Adam'); // 是否存在key 'Adam': truem.get('Adam'); // 67m.delete('Adam'); // 删除key 'Adam'm.get('Adam'); // undefined 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉： 1234var m = new Map();m.set('Adam', 67);m.set('Adam', 88);m.get('Adam'); // 88 SetSet和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。 要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set： 12var s1 = new Set(); // 空Setvar s2 = new Set([1, 2, 3]); // 含1, 2, 3 重复元素在Set中自动被过滤： 12var s = new Set([1, 2, 3, 3, '3']);s; // Set &#123;1, 2, 3, \"3\"&#125; 注意数字3和字符串&#39;3&#39;是不同的元素。 通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果： 1234s.add(4);s; // Set &#123;1, 2, 3, 4&#125;s.add(4);s; // 仍然是 Set &#123;1, 2, 3, 4&#125; 通过delete(key)方法可以删除元素： 1234var s = new Set([1, 2, 3]);s; // Set &#123;1, 2, 3&#125;s.delete(3);s; // Set &#123;1, 2&#125; iterable遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。 具有iterable类型的集合可以通过新的for ... of循环来遍历。 for...in和for...of的区别： for in 循环的是对象的属性（普通数组的属性就是index） for of 循环的是迭代器中的每一个元素 用for ... of循环遍历集合，用法如下： 123456789101112var a = ['A', 'B', 'C'];var s = new Set(['A', 'B', 'C']);var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);for (var x of a) &#123; // 遍历Array console.log(x);&#125;for (var x of s) &#123; // 遍历Set console.log(x);&#125;for (var x of m) &#123; // 遍历Map console.log(x[0] + '=' + x[1]);&#125; 你可能会有疑问，for ... of循环和for ... in循环有何区别？ 当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果： 12345var a = ['A', 'B', 'C'];a.name = 'Hello';for (var x in a) &#123; console.log(x); // '0', '1', '2', 'name'&#125; for ... in循环将把name包括在内，但Array的length属性却不包括在内。 for ... of循环则完全修复了这些问题，它只循环集合本身的元素： 12345var a = ['A', 'B', 'C'];a.name = 'Hello';for (var x of a) &#123; console.log(x); // 'A', 'B', 'C'&#125; 然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例： 12345678'use strict';var a = ['A', 'B', 'C'];a.forEach(function (element, index, array) &#123; // element: 指向当前元素的值 // index: 指向当前索引 // array: 指向Array对象本身 console.log(element + ', index = ' + index);&#125;); Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身： 1234var s = new Set(['A', 'B', 'C']);s.forEach(function (element, sameElement, set) &#123; console.log(element);&#125;); Map的回调函数参数依次为value、key和map本身： 1234var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);m.forEach(function (value, key, map) &#123; console.log(value);&#125;); 如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element： 1234var a = ['A', 'B', 'C'];a.forEach(function (element) &#123; console.log(element);&#125;); 参考基本数据类型和引用数据类型的区别：https://www.cnblogs.com/c2016c/articles/9328725.html","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://delaprada.com/tags/JavaScript/"}]},{"title":"hexo常用指令及美化博客页面","slug":"hexo常用指令及美化博客页面","date":"2019-12-26T09:54:44.000Z","updated":"2020-01-13T11:43:08.378Z","comments":true,"path":"2019/12/26/hexo常用指令及美化博客页面/","link":"","permalink":"http://delaprada.com/2019/12/26/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%8F%8A%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"hexo常用命令Hexo的命令总体来说比较简单，安装成功之后只需要记住常用的四种即可。在当前blog文件夹根目录下右键点击git bash： hexo s：server启动服务器 hexo clean：clean清除缓存文件（db.json）和已生成的静态文件（public） hexo generate或hexo g：generate生成静态文件 hexo deploy或hexo d：deploy部署网站，部署网站前需预先生成静态文件 一般更改完后执行三条指令：hexo clean，hexo generate，hexo deploy即可（按顺序） 如果要进行文件压缩，在hexo generate指令后，执行gulp指令。 参考https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%EF%BC%89/ hexo各种美化新建page1hexo new &quot;文章名称&quot; 会在source文件夹下_post中新建文件夹和.md文件 侧栏增加标签和分类页面创建标签页面 创建标签页面 1hexo new page tags 基本设置 123title: tagsdate: 2017-12-02 21:01:24type: &quot;tags&quot; 创建分类页面 创建分类页面 1hexo new page categories 基本设置 123title: categoriesdate: 2017-12-02 21:01:24type: &quot;categories&quot; 设置站点图标 先在images文件夹下放入你的图标 在主题配置页面_config.yml中搜索favicon，找到以下位置，并将路径修改为你的图标： 部署之后就可以看到效果了，查看效果：http://delaprada.com 设置头像 在images文件夹中放入你的头像图片 在主题配置页面中修改avatar为你的图片地址： 首页文章不显示全文只显示摘要修改/themes/next/_config.yml主题配置文件中： 1234567scroll_to_more: true #如果文章有摘要,会自动滚动到摘要下面save_scroll: true #通过cookies来缓存阅读进度excerpt_description: true #自动摘录描述作为序言auto_excerpt: #设置阅读全文 enable: true length: 150 #摘要次数read_more_btn: true #阅读全文按钮 修改文章底部的带#的标签修改模板/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将#改为&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;（如果想换成其他图标可到font-awesome中文网查看） 在每篇文章末尾统一添加“本文结束”标记在\\themes\\next\\layout\\_macro中新建passage-end-tag.swig，并加入以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=\"text-align:center;color: #ccc;font-size:15px;\"&gt;-------本&amp;nbsp;文&amp;nbsp; 结&amp;nbsp;束&amp;nbsp;&amp;nbsp;&lt;i class=\"fa fa-heart\" aria-hidden=\"true\"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;感 &amp;nbsp;谢&amp;nbsp;您&amp;nbsp;的&amp;nbsp;阅&amp;nbsp;读-------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body标签之后，post-footer标签之前，添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &#39;passage-end-tag.swig&#39; %&#125; &#123;% endif %&#125;&lt;&#x2F;div&gt; 修改网页背景颜色和侧栏上方brand的颜色打开themes/next/layout/source/css/_custom/custom.styl，加入以下代码： 12345678910111213141516171819202122&#x2F;&#x2F;修改网页背景颜色body &#123; background-color: #F0F8FF&#125;#footer a &#123; color:#eee;&#125;&#x2F;&#x2F; 修改网站头部颜色.headband &#123; height: 3px; background: #ADD8E6;&#125;.site-meta &#123; padding: 20px 0; color: #fff; background: #ADD8E6;&#125;.site-title &#123; color: #fff;&#125; 侧边栏社交设置和友情链接修改主题配置页面：themes/next/_config.yml： 12345678910111213141516171819202122232425262728293031site_state: true# Social Links# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: CSDN: https://blog.csdn.net/weixin_41973410 || copyright GitHub: https://github.com/delaprada || githubsocial_icons: #这里是上面社交链接的对应图标 enable: true CSDN: copyright Github: github icons_only: false transition: true# Follow me on GitHub banner in right-top corner.# Usage: `permalink || title`# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the title and aria-label name.#github_banner: https://github.com/Fitz1318 || Follow me on GitHub# Blog rolls #这里时设置一些相关链接 我这里设置了一些推荐阅读的网站#links_icon: linklinks_title: 实用网站#links_layout: blocklinks_layout: inlinelinks: W3Cschool: http://www.w3school.com.cn/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/tags/Hexo/"}]},{"title":"hexo categories和tags页面不显示解决办法","slug":"hexo-categories和tags页面不显示解决办法","date":"2019-12-25T02:53:13.000Z","updated":"2019-12-26T09:55:44.357Z","comments":true,"path":"2019/12/25/hexo-categories和tags页面不显示解决办法/","link":"","permalink":"http://delaprada.com/2019/12/25/hexo-categories%E5%92%8Ctags%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"官网也有给出具体步骤，但是有坑Hexo官网教程 第一步 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page指令新建一个页面，命名为 categories ：12cd hexo //根目录hexo new page categories //tags和这个操作一致 第二步 找到新建的页面，添加type新建的页面一般在source/categories/index.md中，添加以下内容： 1234title: categoriesdate: 2019-12-25 09:15:45type: \"categories\"layout: \"categories\" 第三步 给你的页面添加分类找到你的页面，在页面上方添加如下内容 123456title: 利用gitpages+hexo搭建自己的博客date: 2019-12-25 09:12:55categories:- Hexotags:- 前端 但此时部署到github上后，打开网页点击分类和标签页面还是出现404！ 第四步 解决方案实属官方坑人系列！！主题配置文件_config.yml中的menu：把 / 后面的空格全部去掉（刚开始的时候默认后面是加了空格导致点击页面出现404）","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/tags/Hexo/"}]},{"title":"利用gitpages+hexo搭建自己的博客","slug":"利用gitpages+hexo搭建自己的博客","date":"2019-12-25T01:12:55.000Z","updated":"2020-01-15T11:07:28.256Z","comments":true,"path":"2019/12/25/利用gitpages+hexo搭建自己的博客/","link":"","permalink":"http://delaprada.com/2019/12/25/%E5%88%A9%E7%94%A8gitpages+hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"前言从开始开始着手搭建到完成大概花了一个下午的时间，采坑不少，在此记录一下 第一步 准备工作node.js下载好，github有已注册的账号在github中新建一个repository，命名为：你的github名称.github.io（下面是我的仓库名称）： （有些博客直接让我们fork它们的项目，个人感觉这么做不太好，很多东西自己动手做一遍更好） 第二步 安装HexoHexo就是一个博客框架，官网上也有安装教程Hexo官网 step1：windows系统鼠标右键git bash，输入两个安装指令： 12npm install hexo-cli -g &#x2F;&#x2F;用于安装hexonpm install hexo-deployer-git --save &#x2F;&#x2F;用于安装hexo部署到git page的deployer step2：创建hexo文件夹hexo安装完成之后，在电脑中新建一个hexo文件夹：右键点击git bash，输入两个命令： 12hexo initnpm install &#x2F;&#x2F;安装所有package.json里的包 执行完成后，hexo文件夹中会多出一些文件： 如果想看本地效果的话，执行以下指令： 12hexo generate &#x2F;&#x2F;自动将md文件生成静态html，css文件hexo server &#x2F;&#x2F;启动本地hexo服务器（localhost:4000） 打开 localhost:4000就可以看到页面啦： （页面会不太一样，我的配了一下主题） 第三步 了解hexo文件夹中的_config.ymlhexo文件夹中比较重要的文件是：_config.yml： 它是一个全局配置文件，包括和github上传链接都在这里配置，例如title之类的： 第四步 本地上传到githubstep1：执行命令，安装deploy.git插件 1npm install hexo-deployer-git --save step2：在主题配置文件_config.yml中修改仓库地址，在_config.yml最下面一行（注意每个冒号后面都有一个空格） step3：配置提交github认证方式执行指令： 1hexo d 直接提交到github仓库中，如果没有认证github和本地的关系，会提示输入用户名和密码 此时打开github的项目会发现原本是空的项目现在有了刚刚上传的文件 第五步 添加域名在阿里云中购买了一个.com的域名（加优惠一年23块，虽然比其他贵一些但是觉得.com好听一些(#^ . ^#)） step1：cmd ping一下github.io获得真实ip地址 step2：然后再域名操作栏点击解析，添加记录 注意要两个都要添加（之前一开始只添加了www不知道为啥就显示不出来） step3：去hexo文件夹的source目录下新建名为CNAME的文件，添加文件内容为你刚才购买的域名，不要添加www step4：然后部署 1231. hexo clean2. hexo generate3. hexo deploy （每次做出更改建议都部署一遍） step5：点击设置，拉到下面，在custom domain中输入你的域名。如果上面的信息不是显示Your site is published at https://xxx.com/，而是dns的之类的错误，可能是域名还没有实名认证 输入域名，成功：","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://delaprada.com/tags/Hexo/"}]}]}